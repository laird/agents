# Common Agent Sections - YAML Anchors for Reuse
# Version: 1.0
# Purpose: Centralize common patterns across all agent definitions
# Usage: Reference anchors using <<: *anchor_name in agent YAML files

---

# Common Protocol Definitions
common_logging_protocol: &logging_protocol
  name: "Agent Logging Protocol"
  file: "protocols/GENERIC-AGENT-LOGGING-PROTOCOL.md"
  enforcement: "MANDATORY - Log all completed work via ./scripts/append-to-history.sh"

common_testing_protocol: &testing_protocol
  name: "Testing Protocol"
  file: "protocols/GENERIC-TESTING-PROTOCOL.md"
  enforcement: "MANDATORY - Validate work with testing"

common_migration_planning_protocol: &migration_planning_protocol
  name: "Migration Planning Guide"
  file: "protocols/GENERIC-MIGRATION-PLANNING-GUIDE.md"
  enforcement: "MANDATORY - Follow 5-phase planning framework"

common_documentation_plan_protocol: &documentation_plan_protocol
  name: "Documentation Plan Template"
  file: "protocols/GENERIC-DOCUMENTATION-PLAN-TEMPLATE.md"
  enforcement: "MANDATORY - Follow complete documentation plan structure"

# Common Protocol Enforcement Patterns
common_logging_enforcement: &logging_enforcement
  - "After completing work, log via ./scripts/append-to-history.sh"
  - "Include all 4 parameters: TITLE, WHAT_CHANGED, WHY_CHANGED, IMPACT"
  - "Verify logging in HISTORY.md before marking work complete"
  - "Use appropriate template for work type"

common_testing_enforcement: &testing_enforcement
  - "Build project after every significant change"
  - "Run appropriate test suites for validation"
  - "Fix any test failures before marking work complete"
  - "Coordinate with tester-agent for comprehensive validation"

# Common Tools
common_required_tools: &common_required_tools
  - Read
  - Bash

common_optional_tools: &common_optional_tools
  - Grep
  - Glob
  - WebSearch
  - WebFetch

# Common Workflow Phase Names
common_workflow_phase_names: &workflow_phases
  analysis: "1_analysis"
  planning: "2_planning"
  implementation: "3_implementation"
  validation: "4_validation"
  documentation: "5_documentation"

# Common Success Criteria
common_success_criteria: &common_success_criteria
  - Work completed successfully with quality
  - Build successful (0 errors) where applicable
  - Tests passing where applicable
  - Documentation logged to HISTORY.md via append-to-history.sh
  - Quality gates met per protocol requirements
  - All deliverables produced

# Common Best Practices
common_best_practices: &common_best_practices
  - Always read file before editing
  - Use Edit tool for existing files (not Write)
  - Build after every significant change
  - Document all work to HISTORY.md via append-to-history.sh
  - Keep changes focused and atomic
  - Test after significant modifications
  - Commit frequently with clear messages
  - Follow protocol requirements strictly
  - Coordinate with other agents when needed

# Common Anti-Patterns
common_anti_patterns: &common_anti_patterns
  - Skipping HISTORY.md logging (NEVER acceptable)
  - Not testing after changes
  - Ignoring protocol requirements
  - Creating new files unnecessarily
  - Making large, unfocused changes
  - Not documenting "why" behind changes
  - Guessing values without verification
  - Changing multiple areas without validation

# Common Integration Patterns
common_integration_coordinator: &coordinates_with_coordinator
  migration-coordinator: "Receives assignments, reports progress"

# Common Metrics
common_metrics: &common_metrics
  - Work completed: count
  - Time to completion: hours
  - Quality score: 0-100
  - Issues encountered: count
  - Issues resolved: count

# Common Output Types
common_outputs: &common_outputs
  - Updated files (code, configuration, documentation)
  - HISTORY.md entries (via append-to-history.sh)
  - Work reports (detailed summaries)

# Specialist Agent Structure Template
specialist_agent_structure: &specialist_structure
  sections:
    - capabilities
    - responsibilities
    - tools
    - workflow
    - success_criteria
    - best_practices
    - anti_patterns
    - outputs
    - integration
    - metrics
    - customization

# Common Tool Combinations
tools_for_code_work: &code_tools
  required:
    - Read
    - Edit
    - Bash
  optional:
    - Write
    - Grep
    - Glob
    - WebSearch

tools_for_documentation: &doc_tools
  required:
    - Read
    - Write
    - Edit
    - Bash
  optional:
    - Grep
    - Glob
    - WebSearch

tools_for_testing: &test_tools
  required:
    - Bash
    - Read
    - Edit
    - Write
  optional:
    - Grep
    - Glob

# Common Customization Guidance
common_customization: &common_customization
  project_specific:
    description: |
      Customize this agent for your specific project needs.
      Add project-specific patterns, thresholds, and requirements.
      Adjust quality gates based on project maturity and risk tolerance.

# Common Protocol Reference Pattern
protocol_reference_pattern: &protocol_reference
  format: "PROTOCOL: [Protocol Name] - [Requirement]"
  example: "PROTOCOL: Follow GENERIC-TESTING-PROTOCOL.md requirements"
  usage: "Reference protocols in workflow steps to ensure compliance"

# Version Information
metadata:
  version: "1.0"
  created: "2025-10-13"
  purpose: "Centralize common patterns across agent definitions"
  usage: "Reference anchors using <<: *anchor_name in agent YAML files"
  maintained_by: "Agent coordination team"
  update_policy: "Update this file when patterns change across all agents"

# Notes
notes: |
  This file contains YAML anchors (&anchor_name) that can be referenced
  in agent definition files using merge keys (<<: *anchor_name).

  Benefits:
  - Single source of truth for common patterns
  - Reduces redundancy across agent files
  - Easier to maintain consistency
  - Updates propagate to all agents

  Usage Example:
    required_protocols:
      mandatory:
        - <<: *logging_protocol
          applies_to: "Specific domain work"

  This will merge all fields from logging_protocol and allow
  overriding specific fields like applies_to.
