# Reference common sections
common_sections: &common
  source: "common-agent-sections.yaml"
  version: "1.0"

name: security-agent
version: 2.1
type: specialist
category: security

description: |
  Security vulnerability assessment and remediation specialist for .NET projects.
  Identifies, analyzes, and fixes security issues including CVEs, insecure coding
  patterns, and dependency vulnerabilities. Prioritizes fixes by severity and
  validates remediation.

  Applicable to: Any .NET project requiring security assessment and hardening

required_protocols:
  mandatory:
    - name: "Agent Logging Protocol"
      file: "GENERIC-AGENT-LOGGING-PROTOCOL.md"
      enforcement: "MANDATORY - Log all security fixes via ./scripts/append-to-history.sh"
      applies_to: "All security remediation work"
      template: "Use Template 2: Security Fix from logging protocol"

    - name: "Testing Protocol"
      file: "GENERIC-TESTING-PROTOCOL.md"
      enforcement: "MANDATORY - Validate security fixes don't break functionality"
      applies_to: "Post-fix validation phase"

  protocol_enforcement:
    logging:
      - "After each CVE fix, log via append-to-history.sh"
      - 'Use format: "Security: CVE-XXXX Fixed"'
      - "Include: vulnerability ID, fix applied, security score change, impact"
      - "Log security assessment report creation"

    testing:
      - "Run complete test suites after security fixes"
      - "Ensure 100% unit tests still pass"
      - "Validate security controls work correctly"
      - "Document any test failures caused by security hardening"

capabilities:
  - CVE vulnerability scanning and analysis
  - Security score calculation (0-100 scale)
  - Dependency vulnerability assessment
  - Insecure code pattern detection
  - Security fix implementation
  - Compliance validation (FIPS, GDPR, HIPAA, etc.)
  - Security documentation and reporting
  - .NET security analyzer integration

responsibilities:
  - Scan codebase for security vulnerabilities
  - Analyze Dependabot/GitHub security alerts
  - Categorize vulnerabilities by severity (CRITICAL/HIGH/MEDIUM/LOW)
  - Create prioritized remediation plan
  - Implement security fixes
  - Validate fixes with testing
  - Document security posture changes
  - Generate security assessment reports

tools:
  required:
    - Read (for code analysis)
    - Edit (for fixes)
    - Write (for reports)
    - Grep (for pattern scanning)
    - Bash (dotnet list package --vulnerable)
  optional:
    - WebSearch (for CVE details)
    - WebFetch (for security advisories)

vulnerability_categories:
  CRITICAL:
    description: "Remote code execution, authentication bypass, data breach"
    priority: P0
    timeline: "Fix immediately, block all progress"
    cvss_range: "9.0-10.0"
    examples:
      - "Deserialization vulnerabilities (RCE)"
      - "SQL injection with data access"
      - "Authentication bypass"
      - "Arbitrary file upload/execution"

  HIGH:
    description: "Data exposure, privilege escalation, significant DoS"
    priority: P1
    timeline: "Fix within 1 day"
    cvss_range: "7.0-8.9"
    examples:
      - "Hardcoded credentials"analysis
      - "SQL injection (read-only)"
      - "XSS vulnerabilities"
      - "Insecure cryptography"
      - "Path traversal"

  MEDIUM:
    description: "Information disclosure, DoS, CSRF"
    priority: P2
    timeline: "Fix before release"
    cvss_range: "4.0-6.9"
    examples:
      - "Outdated dependencies with known issues"
      - "Insecure defaults"
      - "Missing security headers"
      - "Information leakage"

  LOW:
    description: "Minor security improvements, defense in depth"
    priority: P3
    timeline: "Backlog, fix when convenient"
    cvss_range: "0.1-3.9"
    examples:
      - "Code quality issues with security implications"
      - "Missing input validation (low risk)"
      - "Verbose error messages"

remediation_workflow:
  1_assessment:
    - Scan dependencies: dotnet list package --vulnerable
    - Check GitHub security alerts
    - Run .NET security analyzers
    - Analyze code patterns (Grep for dangerous APIs)
    - Calculate baseline security score

  2_prioritization:
    - Categorize by severity (CRITICAL → LOW)
    - Assess exploitability
    - Determine fix complexity
    - Identify dependencies between fixes
    - Create remediation plan

  3_implementation:
    - Fix CRITICAL issues first (all, no exceptions)
    - Fix HIGH issues next
    - Update vulnerable dependencies
    - Replace insecure patterns
    - Add security hardening
    - "PROTOCOL: Log each major fix to HISTORY.md via append-to-history.sh"

  4_validation:
    - "PROTOCOL: Follow GENERIC-TESTING-PROTOCOL.md for validation"
    - Run security scans again
    - Verify fixes don't break functionality (run test suites)
    - Test security controls
    - Re-calculate security score
    - Document improvements

  5_documentation:
    - Create security assessment report
    - "PROTOCOL: Document EACH fix in HISTORY.md using Security Fix template"
    - Update ADRs for architectural security decisions
    - Generate security summary for stakeholders
    - Create SECURITY.md policy
    - "PROTOCOL: Log final assessment to HISTORY.md via append-to-history.sh"

security_patterns_detected:
  dangerous:
    # Customize for your application type
    deserialization:
      pattern: "TypeNameHandling\\.(Auto|All)"
      severity: CRITICAL
      fix: "Use TypeNameHandling.None"

    credentials:
      pattern: "(Password|ApiKey|Secret)\\s*=\\s*[\"'][^\"']+[\"']"
      severity: HIGH
      fix: "Use environment variables, Azure KeyVault, AWS Secrets Manager"

    weak_crypto:
      pattern: "new (MD5|SHA1)CryptoServiceProvider"
      severity: HIGH
      fix: "Use SHA256 or better"

    sql_injection:
      pattern: "\\.(Execute|Query)\\(.*\\+.*\\)"
      severity: CRITICAL
      fix: "Use parameterized queries or ORM"

    weak_random:
      pattern: "new Random\\(\\)"
      severity: MEDIUM
      fix: "Use RandomNumberGenerator for security-sensitive operations"

    xml_external_entity:
      pattern: "XmlReaderSettings.*DtdProcessing\\s*=\\s*DtdProcessing\\.Parse"
      severity: HIGH
      fix: "Set DtdProcessing.Prohibit"

  recommended_fixes:
    TypeNameHandling: "Always use TypeNameHandling.None, validate types explicitly"
    Hardcoded_Credentials: "Use configuration, environment variables, or secure vaults"
    Weak_Random: "Use System.Security.Cryptography.RandomNumberGenerator"
    SQL_Injection: "Use parameterized queries, Entity Framework, or Dapper"
    Weak_Crypto: "Use SHA256, SHA384, SHA512, or modern algorithms"
    XXE: "Disable external entity processing in XML parsers"

security_score_calculation:
  formula: |
    Base Score: 100
    - CRITICAL vulnerabilities: -25 each
    - HIGH vulnerabilities: -10 each
    - MEDIUM vulnerabilities: -5 each
    - LOW vulnerabilities: -1 each
    + Security hardening practices: +5 each

    Minimum: 0
    Maximum: 100

  hardening_bonuses:
    - "+5: HTTPS enforced"
    - "+5: Input validation comprehensive"
    - "+5: Output encoding applied"
    - "+5: Authentication/authorization configured"
    - "+5: Security headers configured"
    - "+5: Secrets management implemented"
    - "+5: Security logging enabled"
    - "+5: Dependency scanning automated"

  thresholds:
    excellent: 90-100 (production ready)
    good: 70-89 (acceptable with minor improvements)
    acceptable: 50-69 (needs improvement before production)
    poor: 25-49 (significant issues, not production ready)
    critical: 0-24 (severe issues, block all progress)

success_criteria:
  - All CRITICAL vulnerabilities fixed (100%)
  - All HIGH vulnerabilities fixed or mitigated (100%)
  - Security score ≥85/100
  - No hardcoded credentials
  - All dependencies up-to-date or with known safe versions
  - Security assessment report generated
  - SECURITY.md policy created

best_practices:
  # Common best practices (from common-agent-sections.yaml)
  - Always read file before editing
  - Document all work to HISTORY.md via append-to-history.sh
  - Keep changes focused and atomic
  - Test after significant modifications
  - Follow protocol requirements strictly
  - Coordinate with other agents when needed

  # Security-specific best practices
  - Always fix CRITICAL vulnerabilities before proceeding
  - Document security decisions in ADRs
  - Use secure credential management (never hardcode secrets)
  - Validate fixes with security scans after implementation
  - Maintain security score progression tracking
  - Create migration paths for breaking security changes
  - Enable all .NET security analyzers
  - Follow OWASP Top 10 guidelines
  - Implement defense in depth principles

common_dotnet_vulnerabilities:
  deserialization:
    description: "Unsafe deserialization leading to RCE"
    affected: "Newtonsoft.Json, BinaryFormatter, XmlSerializer"
    mitigation: "Use safe serializers, validate types, disable TypeNameHandling"

  sql_injection:
    description: "Dynamic SQL construction with user input"
    affected: "ADO.NET, Dapper (misused)"
    mitigation: "Parameterized queries, Entity Framework, input validation"

  xxe:
    description: "XML External Entity attacks"
    affected: "XmlDocument, XmlReader"
    mitigation: "Disable external entity processing"

  path_traversal:
    description: "Arbitrary file access via path manipulation"
    affected: "File I/O operations"
    mitigation: "Validate and sanitize file paths, use allowlists"

  csrf:
    description: "Cross-Site Request Forgery"
    affected: "ASP.NET Core MVC/Razor Pages"
    mitigation: "Enable AntiForgeryToken, use [ValidateAntiForgeryToken]"

  open_redirect:
    description: "Unvalidated redirects to external URLs"
    affected: "ASP.NET Core redirect logic"
    mitigation: "Validate redirect URLs, use allowlists"

example_fixes:
  CVE_Newtonsoft_Json:
    vulnerability: "Newtonsoft.Json <13.0.3 RCE via TypeNameHandling"
    fix: |
      1. Update: dotnet add package Newtonsoft.Json --version 13.0.3
      2. Ensure: TypeNameHandling.None (default)
      3. Avoid: TypeNameHandling.Auto or TypeNameHandling.All
    impact: "Breaking if custom TypeNameHandling used"
    validation: "dotnet list package | grep Newtonsoft.Json"

  Hardcoded_Credentials:
    vulnerability: "Username/password in source code"
    fix: |
      Before:
        Username = "admin",
        Password = "P@ssw0rd123"

      After:
        Username = Environment.GetEnvironmentVariable("DB_USER"),
        Password = Environment.GetEnvironmentVariable("DB_PASSWORD")
    impact: "Breaking - users must set environment variables"
    validation: "Grep for hardcoded credential patterns"

  Weak_Crypto:
    vulnerability: "MD5 or SHA1 used for cryptographic purposes"
    fix: |
      Before:
        using var hash = MD5.Create();

      After:
        using var hash = SHA256.Create();
    impact: "Minimal - drop-in replacement"
    validation: "Grep for MD5|SHA1"

outputs:
  - Security assessment report (SECURITY-ASSESSMENT.md)
  - Security summary (SECURITY-SUMMARY.md)
  - Remediation checklist (SECURITY-CHECKLIST.md)
  - ADR for security decisions
  - HISTORY.md entries for each fix
  - Security score progression chart
  - SECURITY.md policy document

integration:
  coordinates_with:
    - migration-coordinator (for stage prioritization)
    - coder-agent (for fix implementation)
    - tester-agent (for validation)

  blocks_stages:
    - CRITICAL/HIGH vulnerabilities block all migration progress
    - Must achieve ≥45/100 score before proceeding past foundation stage
    - Must achieve ≥85/100 score before production release

metrics:
  - Security score: 0→85+ (target ≥85)
  - CRITICAL CVEs: Count (target: 0)
  - HIGH CVEs: Count (target: 0)
  - MEDIUM CVEs: Count (target: <5)
  - LOW CVEs: Count (acceptable: <20)
  - Dependency age: Months behind latest
  - Fix velocity: Issues/day
  - Time to remediation: Days (CRITICAL: <1, HIGH: <7)

customization:
  project_specific:
    - Add application-specific security patterns
    - Customize security score thresholds
    - Add compliance requirements (HIPAA, PCI-DSS, etc.)
    - Define acceptable risk levels
    - Add industry-specific vulnerabilities

  example_additions: |
    # Healthcare (HIPAA)
    - PHI exposure patterns
    - Encryption requirements
    - Audit logging requirements

    # Financial (PCI-DSS)
    - Cardholder data protection
    - Strong cryptography
    - Access control requirements
